#############################################################################
## Function decorator
#############################################################################


def surrogate(model, tol=0.01, verbose=False):
    """A surrogate function decorator.
    MODEL should be an sklearn model that can return stderr.
    TOL is the tolerance for stderr that triggers retraining.

    The idea is if the surrogate prediction accuracy is less than tol, we use
    the surrogate, and if not we run the function return the value and retrain
    the surrogate.

    """

    def decorator(func):
        @functools.wraps(func)
        def wrapper(X):

            func.model = model

            xtrain = getattr(func, "xtrain", None)
            ytrain = getattr(func, "ytrain", None)

            try:
                pf, se = model.predict(X, return_std=True)

                # if we think it is accurate enough we return it
                if np.all(se < tol):
                    return pf
                else:
                    if verbose:
                        print(
                            f"{pf} is not accurate err={se},",
                            " running and returning function values and retraining",
                        )
                    # Get the true value(s)
                    y = func(X)

                    # add it to the data. For now we add all the points
                    func.xtrain = np.concatenate([func.xtrain, X], axis=0)
                    func.ytrain = np.concatenate([func.ytrain, y])

                    model.fit(func.xtrain, func.ytrain)
                    pf, se = model.predict(X, return_std=True)
                    return y
            except NotFittedError:
                y = func(X)

                func.xtrain = X
                func.ytrain = y

                model.fit(X, y)
                return y

        return wrapper

    return decorator
